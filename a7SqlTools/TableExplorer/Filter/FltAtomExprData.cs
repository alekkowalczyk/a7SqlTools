using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using System.Xml.Linq;
using a7SqlTools.TableExplorer.Enums;
using a7SqlTools.Utils;

namespace a7SqlTools.TableExplorer.Filter
{
    /// <summary>
    /// atomic filter expression - logical presentation of a single filter expresion like [fieldName][fieldOperator][fieldValue]
    /// generated by query builders to query WHERE clauses
    /// </summary>

    public class FltAtomExprData : FilterExpressionData, ICloneable
    {

        #region atomic expression fields

        /// <summary>
        /// field name for which the operator  and value is assigned
        /// </summary>
        public string Field { get; set; }

        /// <summary>
        /// operator with which the field and value is compared
        /// </summary>
        public FilterFieldOperator Operator { get { return _operator; } set { _operator = value; } }

        private FilterFieldOperator _operator;

        public PropertyType PropertyType { get; set; }
        /// <summary>
        /// value which is compared by all operators that us single values (equal, less and so on)
        /// </summary>
        private string _value;
        public string Value
        {
            get
            {
                return _value;
            }
            set
            {
                _value = value;
            }
        }

        /// <summary>
        /// value which is compared by all operators that us multiple values (actually only 'In' operator, dunno it there will be more for this:))
        /// </summary>
        public List<string> Values { get; set; }

        /// <summary>
        /// if true filter is parsed by query builders, if not, it's ignored
        /// </summary>
        public bool IsActive { get; set; }

        public override bool HasActiveFilter { get { return IsActive; } }

        #endregion

        #region constructors

        public FltAtomExprData() {
            IsActive = true;
        }


        public FltAtomExprData(string field, FilterFieldOperator _operator, string value)
        {
            this.Field = field;
            this.Operator = _operator;
            this.Value = value;
            IsActive = true;
        }

        public FltAtomExprData(string field, FilterFieldOperator _operator, List<string> values)
        {
            this.Field = field;
            this.Operator = _operator;
            this.Values = values;
            IsActive = true;
        }

        #endregion

        /// <summary>
        /// clones the instance of this class and the relation data contained in it
        /// </summary>
        /// <returns></returns>
        public override FilterExpressionData Clone()
        {
            FltAtomExprData thisFa = this as FltAtomExprData;
            FltAtomExprData fa = new FltAtomExprData();
            fa.Field = thisFa.Field;
            fa.Operator = thisFa.Operator;
            fa.IsActive = thisFa.IsActive;
            fa.PropertyType = thisFa.PropertyType;
            fa.Value = thisFa.Value;
            fa.Values = thisFa.Values;
            fa.Negate = this.Negate;
            return fa;
        }


        public override string ToString()
        {
            return "a7FltAtomExprData:" + this.HasActiveFilter+ ";" + this.Field + " " + this.Operator.ToString() + " " + (this.Value ?? "null");
        }


        public override System.Xml.Linq.XElement ToXml()
        {
            if(Field=="1" && Value=="2")
                return new XElement(XElementNames.FilterFalseExprNode);
            if (Field == "1" && Value == "1")
                return new XElement(XElementNames.FilterTrueExprNode);
            var xe = new XElement(XElementNames.FilterAtomExpressionNode,
                        new XAttribute("Operator", this.Operator.ToString()),
                        new XAttribute("Field", this.Field),
                        new XAttribute("Value", this.Value.ToStringAllowsNull()),
                        new XAttribute("Negate", this.Negate)
                        );
            return xe;
        }

        public static FltAtomExprData AlwaysFalse()
        {
            return new FltAtomExprData("1", FilterFieldOperator.Equal, "2");
        }

        public static FltAtomExprData AlwaysTrue()
        {
            return new FltAtomExprData("1", FilterFieldOperator.Equal, "1");
        }
    }
}
